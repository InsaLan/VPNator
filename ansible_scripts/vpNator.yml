---


#FIXME: Le script tunnel.sh ne focntionne pas car le path du .ovpn est hardcodé dedans


# On vérifie si aucun tag n'a été défini, dans ce cas on affiche une invite pour choisir l'action a effectuer.
# Le résultat de l'user input est stocké dans hostvars.localhost.pause_result.user_input. Il vaut un string ("1", "2", etc...) si aucun tag a été défini, ou est undefined si au moins un tag a été précisé. Cette variable est TREES CHIANTE à récupérer puisqu'elle ests sur l'host 'localhost'

# On a: hostvars.localhost.pause_result.user_input qui contient la réponse (ou qui est undefined si les tags sont utilisés)

- hosts: localhost
  gather_facts: no
  tasks:
    - name: Check args
      pause: 
        prompt: "WARNING: It looks like you didn't used any tag.\n
        You can use the argument '--tags tag1,tag2,...' to sepcify one or more action to run\n
        What do you want to do now?\n\n
        [1]: Install OpenVPN (and configure it) (--tags install)\n
        [2]: Remove OpenVPN (--tags uninstall)\n
        [3]: Uninstall and reinstall OpenVPN (--tags install,uninstall)\n
        [4]: Stop OpenVPN (--tags stop)\n
        [5]: Start the tunnels and FireqOS (--tags start)"
      register: pause_result
      

    

# Et maintenant on s'occupe vraiment des VPNs
- hosts: vpn
  remote_user: debian
  vars:
    subnet: "{{ hostvars[inventory_hostname].subnet }}"
    port: 5010
    protocol: tcp
    ovpnNumber: "{{ hostvars[inventory_hostname].fournisseur }}"
    packages: ['openvpn', 'iptables', 'openssl', 'htop', 'tmux', 'screen', 'neovim', 'hexedit', 'vim', 'emacs', 'fireqos', 'iftop', 'bmon', 'curl', 'ca-certificates', 'iperf3']
    # OPENVPN
    default_args: --route-noexec --daemon
    extra_args: 
  tasks:  # ****************************** UNINSTALL *************************************
      
    - name: === STOP ===
      block:
      - name: Kill OpenVPN on remote
        become: true
        become_method: sudo
        command: pkill openvpn
        ignore_errors: true
      
      - name: Kill OpenVPN on localhost
        become: true
        become_method: sudo
        command: pkill openvpn
        delegate_to: localhost
        ignore_errors: true
      
      - name: Stop FireQOS on remote
        become: true
        become_method: sudo
        command: fireqos stop
        
      when: (hostvars.localhost.pause_result is defined and (hostvars.localhost.pause_result.user_input == "2" or hostvars.localhost.pause_result.user_input == "3" or hostvars.localhost.pause_result.user_input == "4") ) or hostvars.localhost.pause_result is not defined
      tags: [ uninstall, stop ]
      
    - name: === Uninstall ===
      block:
      - name: Check if the setup script exists
        stat:
          path: /home/uninstall_vpn_ansible.sh
        register: vpn_installed


      - name: Remove Additional Tools Config (FireQOS)
        become: true
        become_method: sudo
        file:
          state: absent
          path: /etc/firehall/fireqos.conf

      - name: Remove IP Table rule for NAT
        become: true
        become_method: sudo
        command: iptables -t nat -D POSTROUTING -o en+ -j MASQUERADE
        ignore_errors: true

      - name: Uninstall additional tools (FireQOS)
        become: true
        become_method: sudo
        apt:
                state: absent
                purge: true
                name: "{{ packages }}"
                
      # Uninstall script begins here
      - name: Uninstall and purge OpenVPN
        become: true
        become_method: sudo
        apt:
                name: openvpn
                purge: True
                state: absent

      - name: Remove OVPN config files
        become: true
        become_method: sudo
        file:
                state: absent
                path: "{{ item }}"
        loop:
            - /etc/openvpn
            - /etc/sysctl.d/30-openvpn-forward.conf
            - /home/vpn
            - /home/nabooVPN{{ ovpnNumber }}

      - name: Launch of the uninstalling script
        become: true
        become_method: sudo
        command: bash /home/uninstall_vpn_ansible.sh
        when: vpn_installed.stat.exists == true

      - name: Uninstall script is deleted
        become: true
        become_method: sudo
        file:
          path: /home/uninstall_vpn_ansible.sh
          state: absent
        when: vpn_installed.stat.exists == true

      - name: Remove VPN directory
        become: true
        become_method: sudo
        file:
          path: /home/vpn/
          recurse: true
          state: directory
        when: vpn_installed.stat.exists == true
      when: (hostvars.localhost.pause_result is defined and (hostvars.localhost.pause_result.user_input == "2" or hostvars.localhost.pause_result.user_input == "3")) or hostvars.localhost.pause_result is not defined
      tags: [ uninstall ]
      
      
    # ************************ INSTALL *****************************************
    - name: === Install ===
      block:
        - name: Install packages and utilities
          become: true
          become_method: sudo
          apt:
            name: "{{ packages }}"
            state: present
            update_cache: yes
            
        - name: Create a folder for the VPN software
          become: true
          become_method: sudo
          file:
            path: /home/vpn
            state: directory

        #- name: Push the custom script using templates
        #  become: true
        #  become_method: sudo
        #  template: src=templates/oneliner_template.j2 dest=/home/vpn/setup_from_naboo_ansible.sh
        #    owner=debian
        #    mode=0777
        
        #- name: Launch of the oneliner
        #  become: true
        #  become_method: sudo
        #  command: bash /home/vpn/setup_from_naboo_ansible.sh
          
        - name: Copy the key generation script
          become: true
          become_method: sudo
          template: src=templates/certgen.sh.j2 dest=/home/vpn/certgen.sh
          
        - name: Copy the server.conf to the remote server
          become: true
          become_method: sudo
          template: src=templates/server.conf.j2 dest=/etc/openvpn/server.conf
            #owner=root
            #mode=0777
            
        - name: Copy the client.ovpn file to the server to apply the template
          become: true
          become_method: sudo
          template:
            src: templates/client.conf.j2
            dest: "/home/vpn/nabooVPN{{ ovpnNumber }}.ovpn"

        - name: Generate the keys
          become: true
          become_method: sudo
          command: bash /home/vpn/certgen.sh
          
        - name: Send dh.pem
          become: true
          become_method: sudo
          template:
            src: templates/dh.pem
            dest: "/etc/openvpn/dh.pem"

        - name: Rename dev tun
          become: true
          become_method: sudo
          lineinfile:            
            path: "/home/vpn/nabooVPN{{ ovpnNumber }}.ovpn"
            regexp: '^dev tun'
            line: "dev tun{{groups['vpn'].index(inventory_hostname) + 1}}"

        - name: Repatriate .ovpn files
          become: true
          become_method: sudo
          fetch:
            src: "/home/vpn/nabooVPN{{ ovpnNumber }}.ovpn"
            dest: ../openvpn_files/
            flat: true

        - name: Enable IP Forward
          become: true
          become_method: sudo
          shell: echo 1 > /proc/sys/net/ipv4/ip_forward

        - name: IP Table Rule
          become: true
          become_method: sudo
          command: iptables -t nat -A POSTROUTING -o en+ -j MASQUERADE

      

      when: (hostvars.localhost.pause_result is defined and (hostvars.localhost.pause_result.user_input == "1" or hostvars.localhost.pause_result.user_input == "3" )) or hostvars.localhost.pause_result is not defined
      tags: [ install ]
      
    # ****************** MOUNT **********************
    - name: === Mounting ===
      block:
        - name: Start openvpn on the remote server
          become: true
          become_method: sudo
          command:
            cmd: "openvpn --config /etc/openvpn/server.conf --daemon"
            chdir: /etc/openvpn
          #command: systemctl restart openvpn
          #@server.service)
            
        - name: Deploy tunnels on the local host
          become: true
          become_method: sudo
          command: "openvpn --config ../openvpn_files/nabooVPN{{ ovpnNumber }}.ovpn {{ default_args }} {{ extra_args}}"
          #command: bash templates/tunnels.sh nabooVPN{{ ovpnNumber }}.ovpn
          delegate_to: localhost
          
        - name: Start FireQOS
          become: true
          become_method: sudo
          command: "fireqos start"
          
      when: (hostvars.localhost.pause_result is defined and (hostvars.localhost.pause_result.user_input == "1" or hostvars.localhost.pause_result.user_input == "3" or hostvars.localhost.pause_result.user_input == "5" )) or hostvars.localhost.pause_result is not defined
      tags: [ install, start]
        


